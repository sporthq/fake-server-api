{
	"questions": [
		{
			"question": "Which is the most popular JavaScript framework?",
			"options": ["Angular", "React", "Svelte", "Vue"],
			"correctOption": 1,
			"points": 10
		},
		{
			"question": "Which company invented React?",
			"options": ["Google", "Apple", "Netflix", "Facebook"],
			"correctOption": 3,
			"points": 10
		},
		{
			"question": "What's the fundamental building block of React apps?",
			"options": ["Components", "Blocks", "Elements", "Effects"],
			"correctOption": 0,
			"points": 10
		},
		{
			"question": "What's the name of the syntax we use to describe the UI in React components?",
			"options": ["FBJ", "Babel", "JSX", "ES2015"],
			"correctOption": 2,
			"points": 10
		},
		{
			"question": "How does data flow naturally in React apps?",
			"options": ["From parents to children", "From children to parents", "Both ways", "The developers decides"],
			"correctOption": 0,
			"points": 10
		},
		{
			"question": "How to pass data into a child component?",
			"options": ["State", "Props", "PropTypes", "Parameters"],
			"correctOption": 1,
			"points": 10
		},
		{
			"question": "When to use derived state?",
			"options": [
				"Whenever the state should not trigger a re-render",
				"Whenever the state can be synchronized with an effect",
				"Whenever the state should be accessible to all components",
				"Whenever the state can be computed from another state variable"
			],
			"correctOption": 3,
			"points": 30
		},
		{
			"question": "What triggers a UI re-render in React?",
			"options": ["Running an effect", "Passing props", "Updating state", "Adding event listeners to DOM elements"],
			"correctOption": 2,
			"points": 20
		},
		{
			"question": "When do we directly \"touch\" the DOM in React?",
			"options": [
				"When we need to listen to an event",
				"When we need to change the UI",
				"When we need to add styles",
				"Almost never"
			],
			"correctOption": 3,
			"points": 20
		},
		{
			"question": "In what situation do we use a callback to update state?",
			"options": [
				"When updating the state will be slow",
				"When the updated state is very data-intensive",
				"When the state update should happen faster",
				"When the new state depends on the previous state"
			],
			"correctOption": 3,
			"points": 30
		},
		{
			"question": "If we pass a function to useState, when will that function be called?",
			"options": [
				"On each re-render",
				"Each time we update the state",
				"Only on the initial render",
				"The first time we update the state"
			],
			"correctOption": 2,
			"points": 30
		},
		{
			"question": "Which hook to use for an API request on the component's initial render?",
			"options": ["useState", "useEffect", "useRef", "useReducer"],
			"correctOption": 1,
			"points": 10
		},
		{
			"question": "Which variables should go into the useEffect dependency array?",
			"options": [
				"Usually none",
				"All our state variables",
				"All state and props referenced in the effect",
				"All variables needed for clean up"
			],
			"correctOption": 2,
			"points": 30
		},
		{
			"question": "An effect will always run on the initial render.",
			"options": ["True", "It depends on the dependency array", "False", "In depends on the code in the effect"],
			"correctOption": 0,
			"points": 30
		},
		{
			"question": "When will an effect run if it doesn't have a dependency array?",
			"options": [
				"Only when the component mounts",
				"Only when the component unmounts",
				"The first time the component re-renders",
				"Each time the component is re-rendered"
			],
			"correctOption": 3,
			"points": 20
		}
	],
	"questionsPL": [
		{
			"question": "Który framework JavaScript jest najpopularniejszy?",
			"options": ["Angular", "React", "Svelte", "Vue"],
			"correctOption": 1,
			"points": 10
		},
		{
			"question": "Która firma wynalazła React?",
			"options": ["Google", "Apple", "Netflix", "Facebook"],
			"correctOption": 3,
			"points": 10
		},
		{
			"question": "Jaki jest fundamentalny element budowy aplikacji w React?",
			"options": ["Komponenty", "Bloki", "Elementy", "Efekty"],
			"correctOption": 0,
			"points": 10
		},
		{
			"question": "Jak nazywa się składnia, którą używamy do opisywania interfejsu użytkownika w komponentach React?",
			"options": ["FBJ", "Babel", "JSX", "ES2015"],
			"correctOption": 2,
			"points": 10
		},
		{
			"question": "Jak naturalnie przepływa dane w aplikacjach React?",
			"options": ["Od rodziców do dzieci", "Od dzieci do rodziców", "W obie strony", "Decyduje programista"],
			"correctOption": 0,
			"points": 10
		},
		{
			"question": "Jak przekazać dane do komponentu potomnego?",
			"options": ["Stan", "Propsy", "PropTypes", "Parametry"],
			"correctOption": 1,
			"points": 10
		},
		{
			"question": "Kiedy używa się stanu pochodnego?",
			"options": [
				"Zawsze, gdy stan nie powinien wywoływać ponownego renderowania",
				"Zawsze, gdy stan można zsynchronizować z efektem",
				"Zawsze, gdy stan powinien być dostępny dla wszystkich komponentów",
				"Zawsze, gdy stan można obliczyć na podstawie innej zmiennej stanu"
			],
			"correctOption": 3,
			"points": 30
		},
		{
			"question": "Co powoduje ponowne renderowanie interfejsu użytkownika w React?",
			"options": [
				"Wywołanie efektu",
				"Przekazywanie propsów",
				"Aktualizacja stanu",
				"Dodawanie nasłuchiwaczy zdarzeń do elementów DOM"
			],
			"correctOption": 2,
			"points": 20
		},
		{
			"question": "Kiedy bezpośrednio 'dotykamy' DOM w React?",
			"options": [
				"Gdy potrzebujemy nasłuchiwać zdarzenia",
				"Gdy potrzebujemy zmienić interfejs użytkownika",
				"Gdy potrzebujemy dodać style",
				"Prawie nigdy"
			],
			"correctOption": 3,
			"points": 20
		},
		{
			"question": "W jakiej sytuacji używamy wywołania zwrotnego (callback) do aktualizacji stanu?",
			"options": [
				"Gdy aktualizacja stanu będzie wolna",
				"Gdy zaktualizowany stan zawiera dużo danych",
				"Gdy aktualizacja stanu powinna być szybsza",
				"Gdy nowy stan zależy od poprzedniego stanu"
			],
			"correctOption": 3,
			"points": 30
		},
		{
			"question": "Jeśli przekazujemy funkcję do useState, kiedy zostanie ona wywołana?",
			"options": [
				"Przy każdym ponownym renderowaniu",
				"Za każdym razem, gdy aktualizujemy stan",
				"Tylko podczas pierwszego renderowania",
				"Pierwszy raz, gdy aktualizujemy stan"
			],
			"correctOption": 2,
			"points": 30
		},
		{
			"question": "Który hook używa się do wykonywania żądania API podczas początkowego renderowania komponentu?",
			"options": ["useState", "useEffect", "useRef", "useReducer"],
			"correctOption": 1,
			"points": 10
		},
		{
			"question": "Które zmienne powinny być umieszczone w tablicy zależności useEffect?",
			"options": [
				"Zazwyczaj żadne",
				"Wszystkie nasze zmienne stanu",
				"Wszystkie zmienne stanu i propsy używane w efekcie",
				"Wszystkie zmienne potrzebne do czyszczenia"
			],
			"correctOption": 2,
			"points": 30
		},
		{
			"question": "Czy efekt zawsze zostanie uruchomiony przy początkowym renderowaniu?",
			"options": ["Prawda", "To zależy od tablicy zależności", "Fałsz", "To zależy od kodu w efekcie"],
			"correctOption": 0,
			"points": 30
		},
		{
			"question": "Kiedy efekt zostanie uruchomiony, jeśli nie ma tablicy zależności?",
			"options": [
				"Tylko w momencie montowania komponentu",
				"Tylko w momencie demontażu komponentu",
				"Pierwszy raz, gdy komponent zostaje ponownie przerysowany",
				"Za każdym razem, gdy komponent jest ponownie przerysowywany"
			],
			"correctOption": 3,
			"points": 20
		}
	]
}
